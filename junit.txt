/import static org.junit.Assert.assertEquals;


import java.util.Arrays;

import java.util.Collection;


import org.junit.Test;

import org.junit.runner.RunWith;

import org.junit.runners.Parameterized;

import org.junit.runners.Parameterized.Parameter;

import org.junit.runners.Parameterized.Parameters;


@RunWith(Parameterized.class)

public class ParmeterisedTest {

@Parameter(0)

public int arg1;

@Parameter(1)

public int arg2;

@Parameter(2)

public int expected;

public int actual;


@Parameters

public static Collection<Object[]> data() {

Object[][] data = new Object[][] { { 1, 2, 2 }, { 2147483647, 1, 2147483647 }, { 1.5, 2, 3.5 }, { null, 2, 2 },

{ "string", 2, 2 }, { 5, 3, 8 }, { 121, 4, 125 } };

return Arrays.asList(data);

}


Calc c = new Calc();


@Test

public void parmeterisedsumTest() {

actual = c.sum(arg1, arg2);

assertEquals("Test Result", expected, actual);

}

}


*************************************************************


import static org.junit.Assert.assertEquals;


import java.util.Arrays;

import java.util.Collection;


import org.junit.Test;

import org.junit.runner.RunWith;

import org.junit.runners.Parameterized;

import org.junit.runners.Parameterized.Parameters;


@RunWith(Parameterized.class)

public class ParameterizedTestUsingConstructor {


public int arg1;

public int arg2;


public ParameterizedTestUsingConstructor(int p1, int p2) {

arg1 = p1;

arg2 = p2;

}


public int actual;


@Parameters

public static Collection<Object[]> data() {

Object[][] data = new Object[][] { { 1, 2 }, { 2147483647, 1 }, { 1.5, 2 }, { null, 2 }, { "string", 2 },

{ 5, 3 }, { 121, 4 } };

return Arrays.asList(data);

}


Calc c = new Calc();


@Test

public void parmeterisedConstructorsumTest() {

actual = c.sum(arg1, arg2);

assertEquals("Test Result", arg1 + arg2, actual);

}


}





<configuration>
<rules>
<!-- implementation is needed only for Maven 2 -->
<rule implementation="org.jacoco.maven.RuleConfiguration">
<element>BUNDLE</element>
<limits>
<!-- implementation is needed only for Maven 2 -->
<limit implementation="org.jacoco.report.check.Limit">
<counter>COMPLEXITY</counter>
<value>COVEREDRATIO</value>
<minimum>0.60</minimum>
</limit>
</limits>
</rule>
</rules>
</configuration>
</execution>
</executions>
</plugin>
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-surefire-plugin</artifactId>
<version>2.16</version>
</plugin>
<plugin>
<groupId>org.apache.maven.plugins</groupId>
<artifactId>maven-failsafe-plugin</artifactId>
<version>2.16</version>
<executions>
<execution>
<id>default-integration-test</id>
<goals>
<goal>integration-test</goal>
</goals>
</execution>
</executions>
</plugin>
</plugins>
</build>
